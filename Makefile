# uCtrl needs
# This file was based on makefile generated by mbed for generating export to gcc-arm-mbed
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

###############################################################################
# Utilities for the FRDM-KL25Z hardware
###############################################################################



SYS_OBJECTS =  
INCLUDE_PATHS =  
LIBRARY_PATHS =  
LIBRARIES = 
LINKER_SCRIPT = 
OBJECTS = 

include ./Libraries/mbed/Makefile
include ./Libraries/mbed-rtos/Makefile

INCLUDE_PATHS += -I./Src
INCLUDE_PATHS += -I./Src/Controller
INCLUDE_PATHS += -I./Src/Communication
INCLUDE_PATHS += -I./Src/Communication/frozen
INCLUDE_PATHS += -I./Src/TaskHandler
OBJECTS += ./Src/main.o
OBJECTS += ./Src/Controller/UController.o
OBJECTS += ./Src/Communication/FakeMessageHandler.o
OBJECTS += ./Src/Communication/UComDriverIn.o
OBJECTS += ./Src/Communication/UComDriverOut.o
OBJECTS += ./Src/Communication/UMsgHandler.o
OBJECTS += ./Src/Communication/frozen/frozen.o
OBJECTS += ./Src/TaskHandler/UTaskHandler.o

#really hacky way to add object files (not functionnal)
#CPP_OBJECTS = "find ./Src -name *.cpp"
#OBJECTS += $(CPP_OBJECTS//.cpp/.o)
#test:
#	echo $(OBJECTS)

###############################################################################
GCC_BIN = ./Dependancies/gcc-arm-none-eabi/bin/
CPU = -mcpu=cortex-m0plus -mthumb

#default release
CC_OPTIMISATION = -Os
PROJECT = uCtrl_Firmware_Release
CC_SYMBOLS =



ifeq ($(UCTRL_BUILD_TYPE), Debug)
	CC_OPTIMISATION += -g3
    PROJECT = uCtrl_Firmware_Debug
endif

ifeq ($(UCTRL_BUILD_TYPE), DebugPrint)
	CC_OPTIMISATION += -g3
    PROJECT = uCtrl_Firmware_Debug_Print
    CC_SYMBOLS += -DDEBUG_PRINT
endif

AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy

CC_FLAGS = $(CPU) -c $(CC_OPTIMISATION) -fno-common -fmessage-length=0 -Wall -fno-exceptions -ffunction-sections -fdata-sections
CC_SYMBOLS += -DTARGET_KL25Z -DTARGET_M0P -DTARGET_Freescale -DTARGET_KLXX -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -D__CORTEX_M0PLUS -DARM_MATH_CM0PLUS -DMBED_BUILD_TIMESTAMP=1393616359.58 -D__MBED__=1 

LD_FLAGS = -mcpu=cortex-m0plus -mthumb -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float
LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys

all: $(PROJECT).bin
	 cp $(PROJECT).bin /media/MBED;sync;
	 ../enableSerialPort.sh;
#ifeq ($(UCTRL_BUILD_TYPE), Debug)
#	 ../startDBGServer.sh
#endif

clean:
	rm -f $(PROJECT).bin $(PROJECT).elf $(OBJECTS)

.s.o:
	$(AS) $(CPU) -o $@ $<

.c.o:
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

.cpp.o:
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 $(INCLUDE_PATHS) -o $@ $<


$(PROJECT).elf: $(OBJECTS) $(SYS_OBJECTS)
	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ $(LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(LD_SYS_LIBS)

$(PROJECT).bin: $(PROJECT).elf
	$(OBJCOPY) -O binary $< $@
