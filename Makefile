# uCtrl
# This file was based on makefile generated by mbed for generating export to gcc-arm-mbed
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

SYS_OBJECTS = 
INCLUDE_PATHS = 
LIBRARY_PATHS = 
LIBRARIES = 
LINKER_SCRIPT = 
OBJECTS = 

include ./config.mk

TARGET ?= FRDM-K64F
MBED_RTOS_PATH ?= ../mbed/libraries/rtos/
MBED_PATH ?= ../mbed/libraries/mbed/
NET_PATH ?= ../mbed/libraries/net/
PLC_PATH ?= ./Src/PLC/
ETH_PATH = $(NET_PATH)eth/
LWIP_PATH = $(NET_PATH)lwip/

#to be used by targets
ARM_TOOLCHAIN = TOOLCHAIN_GCC_ARM
TOOLCHAIN = TOOLCHAIN_GCC
CPU = 

###############################################################################
#Build type
###############################################################################

#default release
CC_OPTIMISATION = -Os
PROJECT = uCtrl_Firmware_Release
CC_SYMBOLS =

ifeq ($(UCTRL_BUILD_TYPE), Debug)
	CC_OPTIMISATION += -g3
	PROJECT = uCtrl_Firmware_Debug
endif

ifeq ($(UCTRL_BUILD_TYPE), DebugPrint)
	CC_OPTIMISATION += -g3
	PROJECT = uCtrl_Firmware_Debug_Print
	CC_SYMBOLS += -DDEBUG_PRINT
endif

###############################################################################
#TARGET_INCLUDE
###############################################################################
include ./Targets/Target.mk

###############################################################################
#uCtrl sources
###############################################################################
INCLUDE_PATHS += -I.
INCLUDE_PATHS += -I./Src/
INCLUDE_PATHS += -I./Src/TaskHandler
INCLUDE_PATHS += -I./Src/Tasks
INCLUDE_PATHS += -I./Src/Utils
INCLUDE_PATHS += -I./Src/Scenario
INCLUDE_PATHS += -I./Src/Communication
INCLUDE_PATHS += -I./Src/Platform
INCLUDE_PATHS += -I./Src/MbedJSONValue
INCLUDE_PATHS += -I./Src/NTPClient
INCLUDE_PATHS += -I./Src/Conditions
INCLUDE_PATHS += -I./Src/Devices
INCLUDE_PATHS += -I./Src/Devices/Actuators
INCLUDE_PATHS += -I./Src/Devices/Sensors
INCLUDE_PATHS += -I./Src/Communication/frozen

#OBJECTS += ./Src/mainPLC.o
OBJECTS += ./Src/main.o

OBJECTS += ./Src/TaskHandler/UTaskHandler.o
OBJECTS += ./Src/Tasks/UTask.o
OBJECTS += ./Src/Utils/UJsonUtils.o
OBJECTS += ./Src/Utils/UMathUtils.o
OBJECTS += ./Src/Utils/UPinUtils.o
OBJECTS += ./Src/Scenario/UScenario.o
OBJECTS += ./Src/Communication/UComDriverOut.o
OBJECTS += ./Src/Communication/UMsgHandler.o
OBJECTS += ./Src/Communication/UComDriverIn.o
OBJECTS += ./Src/Platform/UPlatform.o
OBJECTS += ./Src/MbedJSONValue/MbedJSONValue.o
OBJECTS += ./Src/EthernetInterface/EthernetInterface.o
OBJECTS += ./Src/EthernetInterface/Socket/Endpoint.o
OBJECTS += ./Src/EthernetInterface/Socket/TCPSocketServer.o
OBJECTS += ./Src/EthernetInterface/Socket/UDPSocket.o
OBJECTS += ./Src/EthernetInterface/Socket/Socket.o
OBJECTS += ./Src/EthernetInterface/Socket/TCPSocketConnection.o
OBJECTS += ./Src/NTPClient/NTPClient.o
OBJECTS += ./Src/Conditions/UCondition.o
OBJECTS += ./Src/Devices/UDeviceHandler.o
OBJECTS += ./Src/Devices/UDevice.o
OBJECTS += ./Src/Devices/Actuators/USwitchActuator.o
OBJECTS += ./Src/Devices/Actuators/UActuator.o
OBJECTS += ./Src/Devices/Sensors/USensorLight.o
OBJECTS += ./Src/Devices/Sensors/USensor.o
OBJECTS += ./Src/Devices/Sensors/USensorTemperature.o
OBJECTS += ./Src/Communication/frozen/frozen.o
OBJECTS += ./Src/Communication/frozen/unit_test.o

###############################################################################
#Makefile target build
###############################################################################
AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy

#for clearing .d files
OBJECTS_D = $(OBJECTS:.o=.d)

.PHONY: clean configure

all: $(PROJECT).bin
	 cp $(PROJECT).bin /media/MBED;sync;
	 ../enableSerialPort.sh;
#ifeq ($(UCTRL_BUILD_TYPE), Debug)
#	 ../startDBGServer.sh
#endif

clean:
	rm -f $(PROJECT).bin $(PROJECT).elf $(OBJECTS) $(OBJECTS_D)
	
configure:
	./configure

.s.o:
	$(AS) $(CPU) -o $@ $<

.c.o:
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

.cpp.o:
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 -fno-rtti $(INCLUDE_PATHS) -o $@ $<


$(PROJECT).elf: $(OBJECTS) $(SYS_OBJECTS)
	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ $(LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(LD_SYS_LIBS)

$(PROJECT).bin: $(PROJECT).elf
	$(OBJCOPY) -O binary $< $@
	
$(PROJECT).lst: $(PROJECT).elf
	@$(OBJDUMP) -Sdh $< > $@